connect eclipse and tomcat

1. eclipse ee 32bit
2. tomacat: service installer with user: admin
3. eclipse server add tomcat (c:\apache foundation...)

eclipse file new dynamicWebProject

run .jsp right click on the file, choose Run as, run on server. 
//for expression
convert string to upper case <%= new String("Hello World!").toUpperCase()%>
Captain log : now the time is <br />
<%= new java.util.Date() %>
//for scriptlet
<%
for (int i = 0; i < 5;  i++){
	out.println("i love jsp "+i);
}
%>

//for method declaration
<%! String makeItLower(String data){
	return data.toLowerCase();
}
%>
<br/><br/> //method call
HELLO to lower case <%=makeItLower("HELLO") %>

<%@ page import ="com.lovetocode.jsp.FunUtils, java.util.ArrayList"  %>

jsp built in server objects

<jsp:include page="my-header.html"></jsp:include>
<jsp:include page="my-footer.jsp"></jsp:include>

<form action="student-register.jsp">
First name : <input type = "text" name = "firstname"><br/><br/>
Last name : <input type = "text" name = "lastname"><br/><br/>
<input type = "submit" value = "Submit">
</form>

Student registration is confirmed: <br/> <br/>
<%= request.getParameter("firstname") %>  <%= request.getParameter("lastname") %>

${param.firstname} ${param.lastname }

Nationality: //drop down
<select name = "nationality" >
<option>France</option>
<option>German</option>
<option>Rather not say</option> 
</select>
<%= request.getParameter("nationality") %>

//check button
Languages you are willing to choose: <br/>
		<input type = "checkbox" name = "language" value = "C#">C#
		<input type = "checkbox" name = "language" value = "JAVA">JAVA
		<input type = "checkbox" name = "language" value = "C++">C++
		<input type = "checkbox" name = "language" value = "Python">Python<br/>

	<!-- display list create html dynamic -->
	<ul>		
		<%
		    String [] languages = request.getParameterValues("language");
		    if (languages != null){
		    	for (String language: languages){
		    	out.println("<li>"+language+"</li>");
		    }	
		    }

	    %>
	</ul>

	tracking unique user sessio id
	1. sesion id is unique, provided by tomcat server
	2. server memory not local pc ,not database
	3. session.setAtrribute(String attributename, value) //could be array 
	4. Object session.getAttribute(attributename)

	setMaxInactiveIneterval(milisec) //normaly is  30mins
	<body>
	<br />
	<br />
	<br />
	<!-- create FORM -->
	<form action="mylist.jsp">
		Add new Item: <input type="text" name="items"> <input
			type="submit" value="Submit">
	</form>
	<!-- submit items  -->
	<%  //get session attribute the list
    	List<String> itemsEntered = (List<String>)session.getAttribute("itemsEnteredByFar");
    	//if does not exist, create it
    	if (itemsEntered == null){
    		itemsEntered = new ArrayList<String>();
    		session.setAttribute("itemsEnteredByFar", itemsEntered);
    	}
    	//add data to the list
    	String itemToAdd = request.getParameter("items");
    	if( itemToAdd!= null){
    		itemsEntered.add(itemToAdd);
    	}
    %>
	<br />
	<br />
	<br />
	<hr>
	<br />
	<br />
	<br /> Item entered:
	<!-- display items -->
	<ol>
		<%
            for (String tempItem:itemsEntered ){
            	out.println("<li>"+tempItem+"</li>");
            }
        %>
	</ol>

</body>

By default, JSPs have session tracking enabled and a new HttpSession object is instantiated for each new client automatically. Disabling session tracking requires explicitly turning it off by setting the page directive session attribute to false as follows:
<em><%@ page session="false" %>
</em>


Cookies
1. session is short, like 30 mins
2. Cookies help to personalize the website for a user, by keep tracking the users preference long term cookie.setMaxAge(60*60*24*365);
3. cookies are basicly text data (name, value) pairs exchanged between web browser and server
4. web browser only send the cookie to server of which the domain match
5. javax.servlet.http.Cookie cookie.getName(); cookie.getValue(); new Cookie(string name, String value);

Homepage.jsp:
                  show content based on a default language
                  get cookie to update the lang Cookie [] cookies = request.getCookies();
                  if client click on change lang setting, go to that page 
Change lang page.html:
                  show the form for client to fill

Change lang page.jsp: 
                  create cookie based on the what lang the cient has chosen response.addCookie(cookie);
                  confirm the setting change
                  if the client click on the return to home page

    // encode cookie data ... handle case of languages with spaces in them
    favLang = URLEncoder.encode(favLang, "UTF-8");             
    // decode cookie data ... handle case of languages with spaces in them
    favLang = URLDecoder.decode(tempCookie.getValue(), "UTF-8");
JSP Custome Tag benefit
1. minimize the amount of scriptlet code in jsp
2. avoid dumping too much java code in jsp
3. separte presentation and business logic
4. Tag is reusable

JSP Standard tag library: JSTL
//loop the cookies on this domain
<c:forEach items="${cookie}" var="currentCookie">  
    Cookie name as map entry key: ${currentCookie.key} <br/>
    Cookie object as map entry value: ${currentCookie.value} <br/>
    Name property of Cookie object: ${currentCookie.value.name} <br/>
    Value property of Cookie object: ${currentCookie.value.value} <br/>
</c:forEach>

<%
List<Student> students = new ArrayList<Student> ();
students.add(new Student("Wen","Zhao",true));
students.add(new Student("Xue","Gong",false));
students.add(new Student("Ping","Cao",true));
pageContext.setAttribute("studentsList",students);
    
%>
//dislay a table deprived from a ArrayList of object
<table>
<col width = "120">
<col width = "120">
<col width = "120">
<tr>
<th>First Name</th>
<th>Last Name</th>
<th>VIP</th>
</tr>
//studentsList request attribute defined by setAttribute
<c:forEach var = "temp" items = "${studentsList}">
<tr>
<td>${temp.firstName}</td>
<td>${temp.getLastName()}</td>
<td>${temp.isGoldStudent()}</td>
</tr>
</c:forEach>
</table>


<c:if test = "${temp.isGoldStudent()}">
Special discount available!
</c:if>

<c:if test = "${not temp.isGoldStudent()}">
Get VIP to benefit further
</c:if>

<c:choose>
<c:when test = "${temp.isGoldStudent()}"> Special discount available!</c:when>
<c:otherwise> Get VIP to benefit further </c:otherwise>
</c:choose>


<%@ taglib prefix = "fn" uri = "http://java.sun.com/jsp/jstl/functions" %>
 <%@ taglib uri = "http://java.sun.com/jsp/jstl/core" prefix = "c"%>
 <c:set var = "actor" value = "Chandler"></c:set>
Length of ${actor}:${fn:length(actor)}<br/>
Upper case him: ${fn:toUpperCase(actor)}
Does his name start with Ch ?: ${fn:startsWith(actor,"Ch") }

<c:set var = "cities" value = "Paris,Shenzhen,Athens,Shanghai"/>
<c:set var = "citiesArray" value = "${fn:split(cities,',')}"/>
<c:forEach var = "city" items = "${citiesArray }" >
${city}<br/>
</c:forEach>
<c:set var = "citiesJoined" value = "${fn:join(citiesArray,'-')}"/>
${citiesJoined }

JSP - Internationalization| i18n
localization| l10n

Locale = language + region
en_US
en_UK
mylabels.properties
label.greeting = Howdy
label.firstName = First Name
lable.lastName = Last Name
lable.message = Welcome to this class!
mylabels_en_US.properties
<%@ taglib uri = "http://java.sun.com/jsp/jstl/fmt" prefix = "fmt" %>

      <fmt:setLocale value = "en"/>
      <fmt:setBundle basename = "com.tutorialspoint.Example" var = "lang"/>

      <fmt:message key = "count.one" bundle = "${lang}"/><br/>
      <fmt:message key = "count.two" bundle = "${lang}"/><br/>
      <fmt:message key = "count.three" bundle = "${lang}"/><br/>
 //set variable the local
<c:set var = "theLocal"
value = "${not empty param.theLocal ? param.theLocal : pageContext.request.locale}"
scope = "session"/>
//set locale 
<fmt:setLocale value = "${theLocal}"/>
//set bundle
<fmt:setBundle basename = "com.example.wen.i18n.resources.mylabels"/>
<a href="i18n-test.jsp?theLocal=en_US">English (US)</a>  &nbsp; | &nbsp;
<a href="i18n-test.jsp?theLocal=fr_FR">French (FR)</a> &nbsp; | &nbsp;
<a href="i18n-test.jsp?theLocal=zh_CN">Chinese (CN)</a><br/>
<hr>
//refer to message acorrding to the defined labels
<fmt:message key = "label.greeting"/><br/>
<fmt:message key = "label.firstName"/>: John<br/>
<fmt:message key = "label.lastName"/>: Doe<br/>
<fmt:message key = "label.welcome"/>
<hr>
The selected Locale:${theLocal} 

Servlets:
java class that is processed on the server
java class genertate HTML that is returned to browser
can read HTIML form data use cookies and sessions

Model View Controller MVC design pattern
Servlet handle busines logic
jsp presentation view

HTTP 404 not found(Servlet not found) [duplicate]

1. I had suffered this problem too. Whenever we delete a tomcat server and run our project in new one without build classpaths and clean and build that project, we got this type of exceptions.
So, Build your projects classpath. Goto property of your Project then Select =>Java Build Path => Order and Export. Select All classpaths.

2. Cleaning all projects works too

get  vs post
get:arameters remain in browser history because they are part of the URL	
post: Parameters are not saved in browser history.

get: can send but the parameter data is limited to what we can stuff into the request line (URL). Safest to use less than 2K of parameters, some servers handle up to 64K
post:Can send parameters, including uploading files, to the server.

<init-param> vs <context-param> 

<init-param> and <context-param> are the static parameters which are stored in web.xml file. If you have any data which doesn't change frequently you can store it in one of them.

If you want to store particular data which is only confined to a particular servlet scope, then you can use <init-param> .Anything you declare inside <init-param> is only accessible only for that particular servlet.The init-param is declared inside the <servlet> tag.

<servlet>
     <display-name>HelloWorldServlet</display-name>
     <servlet-name>HelloWorldServlet</servlet-name>
     <init-param>
         <param-name>Greetings</param-name>
         <param-value>Hello</param-value>
     </init-param>
</servlet>
and you can access those parameters in the servlet as follows:

out.println(getInitParameter("Greetings"));
If you want to store data which is common for whole application and if it doesn't change frequently you can use <context-param> instead of servletContext.setAttribute() method of the application context. For more information regarding usage of <context-param> VS ServletContext.setAttribute() have a look at this question. context-param are declared under the tag web-app. You can declare and access the <context-param> as follows

<web-app>
    <context-param>
        <param-name>Country</param-name>
        <param-value>India</param-value>
    </context-param>
    <context-param>
        <param-name>Age</param-name>
        <param-value>24</param-value>
    </context-param>
</web-app>
Usage in the application either in a JSP or Servlet

getServletContext().getInitParameter("Country");
getServletContext().getInitParameter("Age");

if want to use servlet level context param, IMPORTANT: Your servlet can not use Annotations for @WebServlet. It has to be manually configured in web.xml with <servlet> and <servlet-mapping> tags

		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		ServletContext context = getServletContext();
		String maxSize = context.getInitParameter("shopping-cart-max-items");
		String teamName = context.getInitParameter("team-name");
		out.println("<html><body>");
		out.println("<br/><br/>");
		out.println("Max items in shopping cart: " + maxSize);
		out.println("<br/><br/>");
		out.println("Powered by :"+teamName);
		out.println("</body></html>");

WEB-INF lib add jstl jars.

MVC DEMO
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//add data
		String [] students = {"Mary","John","Wendy","Miles"};
		request.setAttribute("student_list", students);
		//get request dispatcher
		RequestDispatcher RequetsDispatcherObj =request.getRequestDispatcher("/student-info-jsp.jsp");
		//forward request to jsp
		RequetsDispatcherObj.forward(request, response); 
	}

JSP:<c:forEach var = "temp" items = "${student_list}">
Student: <c:out value=" ${temp}"/>
</c:forEach>

community server installer mysql
win 32bit
password: admin

tomcat user: admin
password: admin 

Tomcat database connection pool
1. mysql 
2. jdbc driver for given database->WEB-INF->lib
3. define connection pool: context.html META-INF/context.html
4. get connection by resource annotation in javacode

DataSource connecting pool

Data access object DAO

Web browser ->Servlet(controller) - >Data access helper class(model) -> database
Servlet(controller) -> jsp(View)->web browser

servlet calls db model via datasource

public  ArrayList<Student> getStudentList(){
		ArrayList<Student> students = new ArrayList<Student> ();
		
		Connection conn = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String query = "SELECT * FROM web_student_tracker.student";
        
        try{
        	conn = dataSource.getConnection();
        	statement = conn.createStatement();
        	resultSet = statement.executeQuery(query);
        
        	while(resultSet.next()){
        		students.add(new Student(resultSet.getString("first_name"),resultSet.getString("last_name"),resultSet.getString("email")));
        	}
        	conn.close();
        	statement.close();
        	resultSet.close();
        	
        }catch(Exception e){
        	e.printStackTrace();
        }
		return students;
	}

	MVC servlet class we override the init(); we put code which we normally put inside a constructor
	<body>
	<div id="wrapper">
		<div id="header">
			<h2>King George University</h2>
		</div>
	</div>

	<div id="container">
		<div id=content>
			<table>
				<tr>
					<th>First Name</th>
					<th>Last Name</th>
					<th>Email</th>
					<%
						for (Student temp : students) {
					%>
				
				<tr>
					<td><%=temp.getFirstName() %></td>
					<td><%=temp.getLastName() %></td>
					<td><%=temp.getEmail() %></td>

				</tr>
				<%} %>


			</table>

		</div>
	</div>
</body>


replace jsp scriptlets with jstl

// get version info using an jsp file
Server Version: <%= application.getServerInfo() %><br>
Servlet Version: <%= application.getMajorVersion() %>.<%= application.getMinorVersion() %>
JSP Version: <%= JspFactory.getDefaultFactory().getEngineInfo().getSpecificationVersion() %> <br>



 <input class="add-student-button" type="submit" value="Add Student"
 onclick = "window.location.href='add-student-form.jsp';return false;"/>


<link type = "text/css" rel = "stylesheet" href = "css/style.css"/>


		<form action="StudentControllerServlet" method="GET">
			<input type="hidden" name="command" value="ADD" />
			<table>
				<tbody>
					<tr>
						<td><label>First Name</label></td>
						<td><input type="text" name="firstName"></td>
					</tr>
					<tr>
						<td><label>Last Name</label></td>
						<td><input type="text" name="lastName"></td>
					</tr>
					<tr>
						<td><label>Email</label></td>
						<td><input type="text" name="email"></td>
					</tr>
					<tr>
						<td><label></label></td>
						<td><input type="submit" value="Submit" class = "save"></td>
					</tr>
				</tbody>
			</table>
		</form>

	public void addStudent(Student newStudent) {
		// TODO Auto-generated method stub
		//get connection and statement
		Connection conn = null;
		PreparedStatement preparedstat = null;
		//get table column information based  on the student object
		String firstName = newStudent.getFirstName();
		String lastName = newStudent.getLastName();
		String email = newStudent.getEmail();
		//create sql
		//INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)  
		//VALUES (value1, value2, value3,...valueN);
		String query = "INSERT INTO web_student_tracker.student (first_name,last_name,email) VALUES(?,?,?)";
		
		try{
			conn = dataSource.getConnection();
			preparedstat = conn.prepareStatement(query);			
			
			preparedstat.setString(1,firstName);
			preparedstat.setString(2, lastName);
			preparedstat.setString(3, email);			
			//execute sql
			preparedstat.execute();

					<c:forEach var="temp" items="${student_info_list}">
					<tr>
						<!-- for each student, define the url-->
						<c:url var="templink" value="StudentControllerServlet">
							<c:param name="command" value="LOAD" />
							<c:param name="studentId" value="${temp.id}" />
						</c:url>


boolean execute()
Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.

ResultSet executeQuery()
Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.

int executeUpdate()
Executes the SQL statement in this PreparedStatement object, which must be an SQL INSERT, UPDATE or DELETE statement; or an SQL statement that returns nothing, such as a DDL statement.

Actually, valueOf uses parseInt internally. The difference is parseInt returns an int primitive while valueOf returns an Integer object.


getParameter() returns http request parameters. Those passed from the client to the server. For example http://example.com/servlet?parameter=1. Can only return String
getAttribute() is for server-side usage only - you fill the request with attributes that you can use within the same request. For example - you set an attribute in a servlet, and read it from a JSP. Can be used for any object, not just string.


		Connection conn = null;
		PreparedStatement stat = null;
		String query = "UPDATE web_student_tracker.student SET first_name = ?, last_name = ?, email = ? WHERE id = ?";	    
		try{
			conn = dataSource.getConnection();
			stat = conn.prepareStatement(query);
			stat.setString(1, studentToUpdate.getFirstName());
			stat.setString(2, studentToUpdate.getLastName());
			stat.setString(3, studentToUpdate.getEmail());
			stat.setInt(4, studentToUpdate.getId());	
			
			stat.executeUpdate();

deploy war file:
1. In Eclipse, stop Tomcat

2. Right-click your project and select Export > WAR File

3. In the Destination field, enter: <any-directory>/mycoolapp.war

4. Outside of Eclipse, start Tomcat
- If you are using MS Windows, then you should find it on the Start menu

5. Make sure Tomcat is up and running by visiting: http://localhost:8080

6. Deploy your new WAR file by copying it to <tomcat-install-directory>\webapps

Give it about 10-15 seconds to make the deployment. You'll know the deployment is over because you'll see a new folder created in webapps ... with your WAR file name.

7. Visit your new app. If your war file was: mycoolapp.war then you can access it with:  http://localhost:8080/mycoolapp/


You would use the exact same technique of using bootstrap with any regular HTML file.

1. Load the bootstrap files in the <head> section of your JSP file

2. Apply the bootstrap styles in the JSP file on html tags.

Inversion of control:
the approche of outsourcing the construction and managemeng of objects

Spring container primary functions
1.create and manage objects(inversion of control)
2. inject object's dependencies(Dependency injection)

configuring spring container
1. xml
2. java annotation
3. java source code

Spring developement process
1. config spring bean(applicationContext.xml)
2. create a spring container (ApplicationContext)
3. retrieve spring bean from spring container

 	<bean id="myCoach"
 		class="com.example.wen.springdemo.YogaCoach">	 		
 	</bean>

		//load spring configuration file
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
		//retrieve bean from container
		Coach theCoach = context.getBean("myCoach",Coach.class);		
		//call method on the bean
		System.out.println(theCoach.getDailyWorkout());		
		//close the context
		context.close();
Dependency injection:
1. dependency something as "helper objects"
2. two most common ones are "constructor injection" and "setter injection"

Constructor injection:
1. define dependency interface and class
2. create constructor for injections
3. config the dependency in spring file <constructor-arg ref = "myFortuneService"/>	

Setter injection:
1.create setter methods in the class for injection
2. config the dependency in spring config file

code to interface not to implementation
		// load spring config file
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
		//retrieve bean from spring container
		CricketCoach coach = context.getBean("myCricketCoach",CricketCoach.class);
		//call methods on bean
		System.out.println(coach.getDailyWorkout());
		System.out.println(coach.getFortune());
		//close the context
		context.close();
<bean id="myCoach"
 		class="com.example.wen.springdemo.TrackCoach">	 
 		<!-- set up constructor injection  -->
 		<constructor-arg ref = "myFortuneService"/>		
 	</bean>
         <!-- setter injection -->
        <property name = "mFortuneService" ref = "myFortuneService"/>  
        <!-- inject literal value-->  
        <property name = "email" value = "team@gmail.com"/>
        <property name = "team" value = "Go Google!"/>
sport.email = sportemail@outlook.com
sport.team = Android Orea

    <!-- load property file -->
 <context:property-placeholder location = "classpath:sport.properties"/>
 <property name = "email" value = "${sport.email}"/>
 <property name = "team" value = "${sport.team}"/>

 public class RandomFortuneService implements FortuneService {
	private String [] fortunes = {
			"Tomorrow is your lucky day!",
			"Today is the day!",
			"Tomrrow will be the best!"
	};

	@Override
	public String getFortune() {
		// TODO Auto-generated method stub
		Random random = new Random();
		int index = random.nextInt(fortunes.length);
		return fortunes[index];
	}

}

by default, bean scope is singleton, which means that spring only create one bean for each type and all the applications out there will share the same bean. good for stateless class, for saving the resources

prototype: a new object is created for each request, good for state classes

Bean lifecycle 
init -> destroy
define init and destroy method for the bean (has to be public void): 
		The methods should be public void
		The methods should be no-arg, meaning they shouldn't accept any method arguments.
config these methods in config file

 	<bean id="myCoach"
 		class="com.example.wen.springdemo.TrackCoach"
 		init-method = "initTrackCoach"
 		destroy-method = "destroyTrackCoach">
 		//define init method

	public void initTrackCoach(){
		System.out.println("Track coach init method");
	}
	public void destroyTrackCoach(){
		System.out.println("destroy track coach method");
	} 

Java annotation
1. special labels/markers added to java classes
2. provide meta-data about the classes
3. processed at run time or compile time

example: @Override

xml: too verbose when big project has thousands of beans
annotation: minimize the XML configuration

instead of load all the beans from XML file
spring will scan java classes for special annotation and automatically register the beans in the spring container

The @Component annotation marks a java class as a bean so the component-scanning mechanism of spring can pick it up and pull it into the application context. To use this annotation, apply it over class as below:

@Component
public class EmployeeDAOImpl implements EmployeeDAO {
    ...
}
set up spring fo java project
1. copy spring file to lib file under the project folder
2. build path->add JARs->select all the jars


<!-- add entry to enable component scanning -->
<context:component-scan base-package="com.example.wen.springdemoannotations"/>

//explicit name the bean ids
@Component("sillyTennisCoach")
public class TennisCoach implements Coach {

		//load spring config 
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
		//retrieve beans
		Coach tennisCoach = context.getBean("sillyTennisCoach", Coach.class);
default bean id, class name with the first letter lower case. 


Autowiring injection type (xml, java annotations)
constructor injection
setter injection
field injection

constructor injection
1. define dependency interface and class (need @Component to register this class too for spring to look up the implementation of the interface)
2. create a constructor for injections
3. config the dependency injection with @AutoWiring annotation (@Autowired added above the constructor)

	@Autowired
	public TennisCoach(FortuneService fortuneService){
		this.fortuneService = fortuneService;
	}

setter injections with annotation and autowiring

1. create setter method in the class for injection
2. config the dependency injection with @AutoWiring annotation (@Autowired added above the setter)

method injections (setter injection is one special type of method injection)
1. define method requiring dependency injectin
2. @Autowired


Field injection
1. applied directly to the class fields even the private ones
2. no need setter methods

@Component
public class JoggingCoach implements Coach {
	@Autowired
	private FortuneService fortuneService;

code to interface not to implementation
choose a style and stay consistent //construction, method and field injections get the same result

Dependency Injection – Field vs Constructor vs Method

when there exisit multiple implementation of a certain interface, error : nouniquebeandefinitionexception
@Autowired
@Qualifier("happyFortuneService") //bean id not class name
private FortuneService fortuneService;
Qualifier can be used to all kinds of injections

beans vs classes
JavaBeans are classes that encapsulate many objects into a single object (the bean). They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods.

A class is nothing but a blueprint or a template for creating different objects which defines its properties and behaviors. Java class objects exhibit the properties and behaviors defined by its class. A class can contain fields and methods to describe the behavior of an object.

when using qualifier, have to add qualier annotation for all Coach classes which meet the name injection needs
 inject properties file using Java annotations



Answer:

This solution will show you how inject values from a properties file using annotatons. The values will no longer be hard coded in the Java code.

1. Create a properties file to hold your properties. It will be a name value pair.  

New text file:  src/sport.properties

foo.email=myeasycoach@luv2code.com
foo.team=Silly Java Coders
Note the location of the properties file is very important. It must be stored in src/sport.properties

2. Load the properties file in the XML config file.

File: applicationContext.xml

Add the following lines:

    <context:property-placeholder location="classpath:sport.properties"/>  

This should appear just after the <context:component-scan .../> line

3. Inject the properties values into your Swim Coach: SwimCoach.java

   

@Value("${foo.email}")
private String email;
    
@Value("${foo.team}")
private String team;
---

DOWNLOAD FULL SOURCE CODE

You can download entire code from here:

- http://www.luv2code.com/downloads/spring-hibernate/spring-props-annotation-demo.zip

@Component
@Scope("prototype")
public class TennisCoach implements Coach {

init-method 
@PostConstruct

destroy-method
@PreDestroy


	
	//define my init method
	@PostConstruct
	public void doMyStuffForInit(){
		System.out.println("doMyStuffForInit");
	}
	//define my destroy method
	@PreDestroy
	public void doMyCleanUpStuff(){
		System.out.println("doMyCleanUpStuff");
	}
For "prototype" scoped beans, Spring does not call the @PreDestroy method.  Gasp!  
In contrast to the other scopes, Spring does not manage the complete lifecycle of a
prototype bean: the container instantiates, configures, and otherwise assembles a
prototype object, and hands it to the client, with no further record of that prototype
instance. 

Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding. 


	public FileFortuneService() {

		File theFile = new File(fileName);
		
		System.out.println("Reading fortunes from file: " + theFile);
		System.out.println("File exists: " + theFile.exists());
		
		// initialize array list
		theFortunes = new ArrayList<String>();
		
		// read fortunes from file
		try (BufferedReader br = new BufferedReader(
				new FileReader(theFile))) {

			String tempLine;

			while ((tempLine = br.readLine()) != null) {
				theFortunes.add(tempLine);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

instead of spring configuration using XML, we could also configure the spring container using pure java code, no XML;
1. create java class and annotate as @Configuration
2. add @ComponentScan(packagename) //optional
3. read spring java configuration class  annotationconfigapplicationcontext(SportConfig.class)
4. retrieve beans

3 ways of configuration
1. full XML file
2. java annotion and <context:component-scan base-package = > to make xml smaller
3. pure java code (JAVA Spring configuration class)

	public static void main(String[] args) {
		//load spring config 
		AnnotationConfigApplicationContext context = new 

		(SportsConfig.class);
		//retrieve beans
		Coach coach = context.getBean("yogaCoach", Coach.class);
		//call methdods on the bean
		System.out.println(coach.getDailyWorkout());
		//close the container
		context.close();

	}
@Configuration
//@ComponentScan("com.example.wen.springdemoannotations")
@PropertySource("classpath:sport.properties")
public class SportsConfig {
	//define bean for fortune service
	@Bean
	public FortuneService tiredFortuneService (){//this method name will be bean id inside the spring container
		return new TiredFortuneService();
	}
	//define bean for swim coach and inject dependency
	@Bean
	public SwimCoach swimCoach(){
		return new SwimCoach(tiredFortuneService ());
	}

}	@Value("${email}")
	private String email;
	@Value("${team}")
	private String team;



Spring MVC
1. framework for building web application in java
2. based on the model-view-controller design pattern
3. leverage features of the core spring framework

Front controller is part of Spring framework and has been already built by spring team: dispatcher servlets
view : jsp +jstl page to render the data to display data to the user; various view templete
controller: place business logic and handler the request delegated from front controller 
model: a container for the data, for shipping data between different parts of spring mvc application
Spring MVC config


<!-- Step 1: Configure Spring MVC Dispatcher Servlet -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- Step 3: Add support for component scanning -->
	<context:component-scan base-package="com.luv2code.springdemo" />

	<!-- Step 4: Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/>

	<!-- Step 5: Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	controller class
	define a class and add the annotation @Controller
	@Controller inherit from @Component and hence support scanning

create development process
1. create controller class
2. define controller method 
3. add request mapping to controller method
4. return view name
5. develope view page

package com.example.wenspringmvc;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

//create controller class
@Controller
public class HomeController {
	
    //create controller method
	@RequestMapping("/")
	public String showPage(){
		//return view
		return "main-menu"; //prefix and suffix will be added according to the config
	}
}

FAQ: HELP! My Spring MVC Controller is not working. What to do?
Section 12, Lecture 103
JUST A HEADS UP ... 

IN THE FOLLOWING VIDEOS YOUR SPRING MVC CONTROLLER CODE MAY NOT WORK

THIS IS AN ECLIPSE CACHING BUG

IF YOUR CONTROLLER DOESN'T WORK THEN TRY THE STEPS BELOW

BE SURE TO COME BACK TO THIS ARTICLE

----

Question:

HELP! My Spring MVC Controller is not working. What to do?

Answer


Debug Tip #1: Make Sure your Package Names is consistent

The Spring configuration file used in the videos expects for your controller to be in the package:

package com.luv2code.springdemo.mvc;

Make sure your controller is this package.
----

Debug Tip #2: Clear Cache

This is normally a caching issue with Eclipse.

Here are some steps to clear the Eclipse cache and Tomcat cache.

1. In the Server's tab in Eclipse, Stop the Tomcat server

2. Right-click the server and select "Clean..."

3. Right-click the server again and select "Clean Tomcat Work Directory..."

---

4. In the Eclipse, select the top-level menu option, Project > Clean ...

5. Be sure your project is selected and click Ok

6. Restart Eclipse

Retest your application. If you continue to have problems try Debug Tip #2

---

Debug Tip #3: Import the Project in  a new workspace




1. Copy your project to a new directory on your computer like, c:\foobar

2. In Eclipse, open a new workspace: Create a new workspace in Eclipse: File > Switch Workspace > Other ... > give any name

3. In Eclipse, import the project 

3a. Use File > Import > General > Existing Projects into Workspace

3b. Browse to directory: c:\foobar

4. In your new workspace, add a reference to the Tomcat server

5. Test your app in the new workspace

---

If you still have problems, then post your code to the classroom discussion forum.

Be sure to include the following files:
- spring-mvc-demo-servlet.xml
- your controller .java
- your view page .jsp

FAQ: HELP! - Can't Start Tomcat - Ports are in Use!
Section 12, Lecture 104
Can't Start Tomcat - Ports are in Use

You may have a problem starting Tomcat. You may see this ugly error message about ports in use.




Solution

You can use the troubleshooting tips below.

Troubleshooting Tip #1

1. Exit Eclipse

2. Open a web web browser and visit, http://localhost:8080

3. If you see a "Tomcat" web page then that means Tomcat is running as a Windows service. To stop Tomcat running as a Windows services, open your Windows Control Panel. Find the service "Apache Tomcat" and stop it.

4. If you don't see a "Tomcat" web page, then stop the appropriate process displayed.

--

Troubleshooting Tip #2

Steps to free port which is already used to run tomcat server in Eclipse

For example , suppose 8080 port is used , we need to make free 8080 to run tomcat

Step 1: (open the CMD command)

C:\Users\username>netstat -o -n -a | findstr 0.0:8080

TCP 0.0.0.0:3000 0.0.0.0:0 LISTENING 3116

Now , we can see that LISTENING port is 3116 for 8080 ,

We need to kill 3116 now

Step 2:-

C:\Users\username>taskkill /F /PID 3116

Step 3: Go to Eclipse and start Server , it will run

Adding data to Spring model

Question

How do I use CSS, JavaScript and Images in a Spring MVC Web App?

Answer

Here are the steps on how to access static resources in a Spring MVC. For example, you can use this to access images, css, JavaScript files etc.

Any static resource is processed as a URL Mapping in Spring MVC. You can configure references to static resources in the spring-mvc-demo-servlet.xml.

In my example, I'm going to have the following directory structure:




I chose to put everything in the "resources" directory. But you can use any name for "resources", such as "assets", "foobar" etc. Also, you can give any name that you want for the subdirectories under "resources".
---

Step 1: Add the following entry to your Spring MVC configuration file: spring-mvc-demo-servlet.xml

You can place this entry anywhere in your Spring MVC config file.

<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources> 

Step 2: Now in your view pages, you can access the static files using this syntax:

<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png"> 

You need to use the JSP expression ${pageContext.request.contextPath} to access the correct root directory for your web application.

Apply the same technique for reading CSS and JavaScript.

---

Here's a full example that reads CSS, JavaScript and images.

<!DOCTYPE html> <html>

<head>

    <link rel="stylesheet" type="text/css"           

           href="${pageContext.request.contextPath}/resources/css/my-test.css">

    <script src="${pageContext.request.contextPath}/resources/js/simple-test.js"></script>

</head>

<body>

<h2>Spring MVC Demo - Home Page</h2>

<a href="hello">Plain Hello World</a>

<br><br>

<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png" />

<br><br>

<input type="button" onclick="doSomeWork()" value="Click Me"/>

</body>

</html>

---

Source code for this example are available here:

- https://gist.github.com/darbyluv2code/9a09543a226baeedc04b9a5037ca52ec



 
Browse Q&A
Continue


   Show curriculum navigation Go to Dashboard
Questions
Search for a question:
Search for a question
13 questions in this lecture

Ask a new question
 Keh Kok YONG
Cannot find "resources" folder
Hi Crud,I couldn't find the "resources" folder inside my "dynamic web project".  So, I tried creating inside "WebContent" folder or "WEB-INF" folder, it image won't show.By the way, I am using STS 3.9.0 release.Thank you.
Tom Kokkeler
NoHandlerFound
Hi Chad, I am trying to link a stylesheet into my jsp. I use the following line in my jsp to do so: <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/stylesheets/springDemoStylesheet.css"/>  When checking the debug window in Opera the link seems to be all just fine. The problem is that I get an error in Eclipse telling me this: org.springframework.web.servlet.PageNotFound noHandlerFound WARNING: No mapping found for HTTP request with URI [/SpringMVCDemo/resources/stylesheets/springDemoStylesheet.css] in DispatcherServlet with name 'dispatcher' I have added the MVS resource mapping into my xml file <mvc:resources mapping="/resources/**" location="/resources/" /> My folder structure is the same as described:[image]So what am I missing here? Could you help me out? Thank you very much:)
Abhishay Srivastava
Getting Unresolved compilation error. "The method addAttribute(String, String) is undefined for the type Model" code snippet- model.addAttribute("message" , result);
Getting Unresolved compilation error.  "The method addAttribute(String, String) is undefined for the type Model"    code snippet- model.addAttribute("message" , result);
Heer Lalchandani
Background Image
Hi sir, I am not able to put background image in JSP ,this background  image i want to insert through css. in jsp.Please Guide me
Остап Мацько
Another answer
Hi Chad)First of all i must say you "Thank you very much" for your videos.I watched only 150 your videos about Spring(i off course will countinue watch).Thanks to your video now i'm practising on a position trainee JavaDev On "Epam Systems" Compony.I have practising Spring project on Spring now.And my question how i can call methods on a processForm(JSP)? I mean i created some methods on a class Car.java how must i call this methods in jsp and how i can see the result of this methods?What you can recommend in this situation?
Blueocean
static resources shortcut
Hi Chad, quick question regarding the static resources. Alternatively to the spring:url taglib pointed out by Christian, can we use the model to define a shortcut to each resource subfolders, such as: <img src="${images}/spring-logo.png"> where images= pageContext.request.contextPath + "/resources/images" if:<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>
Joel Garcia
How to inherit CSS and JS in all the views?
hello teacher, all woks fine, actually i've learned a lot so far! So before of all "THANKS A LOT", but in this lecture I have a question.... im RoR developer and in rails there is something called "partials", also in Laravel exists something called "yield" i suppose that Spring also has something similar, because it isn't a good practice repeat same code in all the views. I mean something like this  <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/css/style.css"> <script src="${pageContext.request.contextPath}/resources/js/event.js"></script>
İsa KÜÇÜKOĞUZ
Are we supposed to know CSS, Javascript and etc. What if we don't ?
Hi Chad,As i asked in the title, are we supposed to know all this stuff other than spring ? or should we learn just the basics ? or what happens if don't know any css or javascript etc ?  because it seems confusing when i look at them first. what do you recommend ?
Sheryl
Why does href in main-menu.jsp have "hello" instead of "ShowForm". it caused a mapping not found error
Ranjen Naidu
How to use CSS , Javascript and Images in Spring MVC Web App using Maven
Hi Chad,I am using Maven. Can you guide me how to use your code you have provided in Section 12 , Lecture 112 in Maven. I have tried and getting the following error:[image]For the full source code you can view from here:https://drive.google.com/open?id=0BzPmevkJwp6yWTRTaElia2lMOXM
Maksym Kolov
Difference between mapping and location
Hi Chad,I cannot make much difference between those two as I tried to use mapping in my jsp page, like this:<img src="${pageContext.request.contextPath}/images/pic.jpg"> and I have the following mvc:resources set up:<mvc:resources mapping="/images/**" location="/img/"></mvc:resources>and it does not work.Documentation is not much of a help either as I have no clue what this means:The URL mapping pattern within the current Servlet context to use for serving resources from this handler, such  as "/resources/**"Any help would be amazing!
Christian Altamirano Ayala
Another Way to import resources
Hi chad, I use in the jsp file the code below, for use CSS, JS, IMG  :) and it works!!.<spring:url value="/resources/bower_components/bootstrap/dist/css/bootstrap.min.css" var="bowerComponent"/>         <spring:url value="/resources/bower_components/metisMenu/dist/metisMenu.min.css" var="metisMenu"/>         <spring:url value="/resources/css/sb-admin-2.css" var="adminsb"/>         <spring:url value="/resources/bower_components/font-awesome/css/font-awesome.min.css" var="font"/>                         <!-- Bootstrap Core CSS -->        <link href="${bowerComponent}" rel="stylesheet">         <!-- MetisMenu CSS -->        <link href="${metisMenu}" rel="stylesheet">         <!-- Custom CSS -->        <link href="${adminsb}" rel="stylesheet">         <!-- Custom Fonts -->        <link href="${font}" rel="stylesheet" type="text/css">previously i have to add <%@taglib prefix="spring" uri="http://www.springframework.org/tags" %>
Carlos Morzan
Upload image or file to images folder in Spring MVC
Hi Chad,Can you let me know how to upload an image or file into the /resources/images/ folder using spring mvc. Thank you.Carlos
Question Details


JUNIT 
eclipse new project->other->maven
junit test case can only be public void and no input param

	@Test
	public void testTruncateAInFirst2Positions_AFirstOne(){
		assertEquals("CD",helper.truncateAInFirst2Positions("ACD"));
	}
	@Test
	public void testAreFirstAndLastTwoCharactersTheSame(){
		//assertEquals(false, );	
		assertFalse(helper.areFirstAndLastTwoCharactersTheSame("ABCD"));
	}
		@Test
	public void testAreFirstAndLastTwoCharactersTheSame_ABAB(){
		assertTrue(helper.areFirstAndLastTwoCharactersTheSame("ABAB"));
	}

	//before method will be executed before every test method runs
	@Before
	public void setup(){
		System.out.println("@before: set up");
	}
	//after method run after every test finish
	@After
	public void afterMethod(){
		System.out.println("@after: clean up");
	}
	//execute once before the tests
	@BeforeClass
	public static void beforeClass(){
		System.out.println("before class");
	}//execute once after the tests
	@AfterClass
	public static void afterClass(){
		System.out.println("after class");
	}
     //compare two objects
      //compare the same object, same memory address assertEquals();
	assertArrayEquals(expected,numbers); 
//test for exceptions
@Test
	public void testNull(){
		int [] number = null;
		try{
			Arrays.sort(number);
		}catch(NullPointerException e){
			//success case
		}
	}

	@Test(expected = NullPointerException.class)
	public void testNull(){
		int [] number = null;	
		Arrays.sort(number);
	}
//test for performance
	@Test(timeout = 67)
	public void arraySort_Performance(){
		int [] numbers = {5,10,5};
		for(int i = 0; i < 1000000; i++){
			numbers[0] = i;
			Arrays.sort(numbers);
		}
	}
//parameterized junit testing
@RunWith(Parameterized.class)
public class ParametizedStringHelperTest {
   
	StringHelper helper = new StringHelper();
	private String input;
	private String expectedOutput;
	
	public ParametizedStringHelperTest(String input, String expectedOutput) {
		super();
		this.input = input;
		this.expectedOutput = expectedOutput;
	}
	@Parameters
	public static Collection<String[]> parameterizedTest(){
		String expected [][] = {{"AAD","CD"},
		{"ACD","CD"}};		
		return Arrays.asList(expected);
	}

	@Test
	public void testTruncateAInFirst2Positions_AFirstOne(){
		assertEquals(expectedOutput,helper.truncateAInFirst2Positions(input));
	}

}
Test suite is used to bundle a few unit test cases and run them together. In JUnit, both @RunWith and @Suite annotations are used to run the suite tests.
NEW->TEST SUITE
@RunWith(Suite.class)
@SuiteClasses({ JavaArraysTest.class, ParametizedStringHelperTest.class })
public class AllTests {

}

JUnit Best Practices

Naming Test Methods
Highlight Important Values in Tests
Handle Exceptions Properly
Readable Assert Statements


Hibernate: a framework for persisting/saving/retrieving java objects in a datebase
1. handle all the low-level SQL
2. minimize the amount of JDBC code
3. provides object to relational mapping(ORM)

developers defines mapping between java classes and database table
map object fields to columns in db table via config
//create a object
Student studentJohn = new Student("John","Doe","jdoe@gmail.com");
//save the objec to dab
int identry = session.save(studentJohn);
//retrieve object from db
Student student = session.get(Student.class, identry);
//return the table as a list
//Hibernate Query language
Query query = session.createQuery("from Student");
List<Student> students = query.list();

Hibernate vs JDBC
hibernate uses JDBC for all dabtabase communications

Raw Servlet vs. Spring MVC
If you're building a really quick and dirty demo that you have no intention of extending later, spring can result in a lot of additional configuration issues (not really if you've done it before, but I always end up fighting with it one way or another), so that might be a time to consider just using plain old servlets. Generally though, anything beyond just a super fast and dirty demo, using some form of MVC framework is going to make life in the future a lot easier and is also in line with best practices. Spring makes things super easy, just have to spend some time on the front end configuring everything.

I should note, there's nothing you can do with java servlets that you can't do with Spring. The big difference is setup time.

Edit: It's worth noting that when I posted this answer, I was unaware of Spring Boot that is actually quite easy to get up an running using either an embedded web server or a more conventional web container. Here's a link to a quick start example: http://projects.spring.io/spring-boot/#quick-start

Spring  bind requestParam with variables
	//annotation request param binding
	//pass studentname value to variable String studentName
	@RequestMapping("/processFormVersionThree")
	public String lesshoutDude(@RequestParam("studentname") String studentName, Model model){
		studentName = studentName.toUpperCase();
		String message = "Yo Yo! "+studentName;
		model.addAttribute("message", message);		
		return "helloworld-confirm";
	}

Controller level/parent request mapping (similar idea like a file system folder)
1. organise request mapping within one controller
2. sovle eventual naming conflits of mapping request
<a href = "helloworld/showForm">Hello World Form</a>
@Controller
@RequestMapping("/helloworld")
public class HelloWorldController {
	@RequestMapping("/showForm")
	public String showForm(){



Spring MVC form 
1. building blocks of web pages
2. form tags are configurable and reusable
3. support data binding
4. automatically setting and retrieving data from a java object/bean
5. form tags will generate html for developer

<%@taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
when spring mvc load form: getter methods will be called
when spring submit form: setter methods will be called

@Controller
@RequestMapping("/student")
public class StudentController {
	
	@RequestMapping("/showForm")
	public String showForm(Model model){
		//create new student object
		Student theStudent = new Student();		
		//add student as model attribute
		model.addAttribute("student", theStudent);
		return "student-form";
		
	}
    //ModelAttribute pass data to theStudent
	@RequestMapping("/processForm")
	public String processForm(@ModelAttribute("student") Student theStudent){
		
		System.out.println("the student: "+theStudent.getFirstName()+" "+theStudent.getLastName());
		//data automatically binded
		return "student-confirmation";
	}

}
    // <form:form> not standard form; path to ensure the auto bind
	<form:form action="processForm" modelAttribute="student">
        First Name: <form:input path="firstName" />
		<br /><br />
        Last Name:<form:input path="lastName" />
		<br /><br />
		<input type="submit" />
	</form:form>

		//here populate the drop down list from this  hashmap field
		countryOptions = new LinkedHashMap<> ();
		countryOptions.put("FR", "France");
		countryOptions.put("DE", "German");
		countryOptions.put("BR", "Brazil");
	}
	public LinkedHashMap<String, String> getCountryOptions() {
		return countryOptions;
	}
	//Drop down button
		<form:select path = "country">
		 	<form:options items = "${student.countryOptions}"/>	
		</form:select>

Question: 

How to use properties file to load country options

Answer:

This solution will show you how to place the country options in a properties file. The values will no longer be hard coded in the Java code.

1. Create a properties file to hold the countries. It will be a name value pair.  Country code is name. Country name is the value.

New text file:  WEB-INF/countries.properties

BR=Brazil 
FR=France 
CO=Colombia 
IN=India
Note the location of the properties file is very important. It must be stored in WEB-INF/countries.properties

2. Update header section for Spring config file

We are going to use a new set of Spring tags for <util>. As a result, you need to update the header information in the Spring config file.

File: spring-mvc-dmo-servlet.xml

Remove the previous header and add this.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
        xmlns:context="http://www.springframework.org/schema/context" 
        xmlns:mvc="http://www.springframework.org/schema/mvc" 
        xmlns:util="http://www.springframework.org/schema/util" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans     
            http://www.springframework.org/schema/beans/spring-beans.xsd     
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd     
            http://www.springframework.org/schema/mvc         
            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
            http://www.springframework.org/schema/util     
            http://www.springframework.org/schema/util/spring-util.xsd">
3. Load the country options properties file in the Spring config file. Bean id: countryOptions

File: spring-mvc-dmo-servlet.xml

Add the following lines:

<util:properties id="countryOptions" location="classpath:../countries.properties" /> 

4. Inject the properties values into your Spring Controller: StudentController.java

@Value("#{countryOptions}") 
private Map<String, String> countryOptions;
5. Add the country options to the Spring MVC model. Attribute name: theCountryOptions

@RequestMapping("/showForm") 
public String showForm(Model theModel) { 
 
    // create a student object Student 
    Student theStudent = new Student();
 
    // add student object to the model 
    theModel.addAttribute("student", theStudent); 
 
    // add the country options to the model 
    theModel.addAttribute("theCountryOptions", countryOptions); 
 
    return "student-form"; 
}
6. Update the JSP page, student-form.jsp, to use the new model attribute for the drop-down list: theCountryOptions

<form:select path="country"> 
 <form:options items="${theCountryOptions}" />
</form:select>
7. Remove all references to country option from your Student.java.  

---

DOWNLOAD FULL SOURCE CODE

You can download entire code from here:

- http://www.luv2code.com/downloads/spring-hibernate/spring-props-mvc-demo.zip
//radio button
		Favorite Language: 
		Java <form:radiobutton path = "favoriteLanguage" value = "Java"/> 
		C# <form:radiobutton path = "favoriteLanguage" value = "C#"/>
		C++ <form:radiobutton path = "favoriteLanguage" value = "C++"/>
		PHP <form:radiobutton path = "favoriteLanguage" value = "PHP"/>



		//populate radio button with options
		favoriteLanguageOptions= new LinkedHashMap<>();
		favoriteLanguageOptions.put("Java", "Java");
		favoriteLanguageOptions.put("C#", "C#");
		favoriteLanguageOptions.put("C++", "C++");
		favoriteLanguageOptions.put("PHP", "PHP");
				Favorite Language: 
		 <form:radiobuttons path="favoriteLanguage"  items = "${student.favoriteLanguageOptions}"/> 
Operating Systems:
	<ul>
		<c:forEach var="tempOS" items="${student.operatingSystems}">
			<li>tempOS</li>
		</c:forEach>
	</ul>
	private String[] operatingSystems;

	public String[] getOperatingSystems() {
		return operatingSystems;
	}
	public void setOperatingSystems(String[] operatingSystems) {
		this.operatingSystems = operatingSystems;
	}
Java standard bean validation api (JSR 303 -309)
support both client side and server side
Spring v4 and later support bean validation api 
1. required
2. validate length
3. validate numbers
4. validate with regular expression
5. custom validation

hibernate validator: seperate project, fully compile with java validation api
add to web info ->lib
1. three jars from dist/
2. four jars from dist/lib/required
hen performing Spring MVC validation, the location of the BindingResult parameter is very important. In the method signature, the BindingResult parameter must immediately after the model attribute. 

If you place it in any other location, Spring MVC validation will not work as desired. In fact, your validation rules will be ignored.

        @RequestMapping("/processForm")
        public String processForm(
                @Valid @ModelAttribute("customer") Customer theCustomer,
                BindingResult theBindingResult) {
            ...            
        }
Here is the relevant section from the Spring Reference Manual

---

22.3.3 Defining @RequestMapping handler methods


@RequestMapping handler methods can have very flexible signatures. The supported method arguments and return values are described in the following section. Most arguments can be used in arbitrary order with the only exception being BindingResult arguments.


The Errors or BindingResult parameters have to follow the model object that is being
bound immediately ...

Source: http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-methods

	//validation rules to Customer class 
	@NotNull(message = "Last Name is required")
	@Size(min =1, message = "is required")
	private String lastName;

	//display erro message on the HTML form
	    Please fill up following form, * are required.
	<form:form action="processForm" modelAttribute="customer">
        First Name : <form:input path="firstName" />
		<br />
        Last Name (*): <form:input path="lastName" />
		<form:errors path="lastName"/>
		<br />
		<input type="submit" value="Submit" />
	</form:form>
		//Spring store validate result in BindingResult
	public String processForm(@Valid @ModelAttribute("customer") Customer customer,
			BindingResult bindingResult){
		if (bindingResult.hasErrors()){
			return "customer-form";
		}else{
			return "customer-confirm";
		}
		
	}

@InitBinder annotation works as a pre processor
it will pre process every web request to the current controller
method annotated with @InitBinder is excuted

	@InitBinder
	public void initBinder(WebDataBinder dataBinder){
		StringTrimmerEditor editor = new StringTrimmerEditor(true); //trim till null
		dataBinder.registerCustomEditor(String.class, editor);//for all comming String data, apply this 
	}

@Min(value = 0, message = "must be greater than or equal to zero")
	@Max(value = 10, message = "must be less than or equal to ten")
	private int freePasses;

        Last Name (*): <form:input path="lastName" />
		<form:errors path="lastName" cssClass = "error"/>
		<br /><br />
		Free Pass:<form:input path = "freePasses"/>
		<form:errors path = "freePasses" cssClass = "error"/>
Regular Expressions
1. a sequence of characters that define a search patter
2. could be used to find or match strings
	
	@Pattern(regexp = "^[a-zA-Z0-9]{5}",message = "only 5 chars or digits")
	private String postalCode;

	@NotNull(message = "Free passes is required")
	@Min(value = 0, message = "must be greater than or equal to zero")
	@Max(value = 10, message = "must be less than or equal to ten")	
	private Integer freePasses;

Creating custom error message:
1. create a new folder under src 
	<!-- load custom error messages -->
    <bean id = "messageSource"
    class = "org.springframework.context.support.ResourceBundleMessageSource">
    	<property name="basenames" value = "resources/messages"></property>
    </bean>
    //override default erro message
    typeMismatch.customer.freePasses = Invalid Number

bindingResult: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'customer' on field 'freePasses': rejected value [xxxdd]; codes [typeMismatch.customer.freePasses,typeMismatch.freePasses,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [customer.freePasses,freePasses]; arguments []; default message [freePasses]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'freePasses'; nested exception is java.lang.NumberFormatException: For input string: "xxxdd"]

Custom validation
create custom java annotation
eclipse new->annotation
@Constraint(validatedBy = CourseCodeConstraintValidator.class)
@Target({ ElementType.METHOD,ElementType.FIELD })
@Retention(RetentionPolicy.RUNTIME)
public @interface CourseCode {
	//define default value
	public String value() default "LUV";
	//define default error message
	public String message() default "must start with LUV";
	//define default groups
	public Class<?>[] groups() default {};
	//define default payloads
	public Class <? extends Payload> [] payload() default {};

}
public class CourseCodeConstraintValidator implements ConstraintValidator<CourseCode, String> {
	private String coursePrefix;
	@Override
	public void initialize(CourseCode courseCode){
		coursePrefix = courseCode.value();
	}

	@Override
	public boolean isValid(String coursename, ConstraintValidatorContext constrainValidationContext) {
		// TODO Auto-generated method stub
		return coursename.startsWith(coursePrefix);
	}	
}
	@CourseCode
	private String courseCode;

Spring MVC Custom Validation - FAQ: Is it possible to integrate multiple validation string in one annotation?



Question:

Is it possible to integrate multiple validation string in one annotation? For example, validate against both LUV and TOPS.

Answer:

Yes, you can do this. In your validation, you will make use of an array of strings.

Here's an overview of the steps.

1. Update CourseCode.java to use an array of strings

2. Update CourseCodeConstraintValidator.java to validate against array of strings

3. Update Customer.java to validate using array of strings

---

Detailed Steps

1. Update CourseCode.java to use an array of strings

Change the value entry to an array of Strings:

    // define default course code
    public String[] value() default {"LUV"};
Note the use of square brackets for the array of Strings. Also, the initialized value uses curley-braces for array data.

2. Update CourseCodeConstraintValidator.java to validate against array of strings

Change the field for coursePrefixes to an array

private String[] coursePrefixes; 

Update the isValid(...) method to loop through the course prefixes. In the loop, check to see if the code matches any of the course prefixes.

    @Override
    public boolean isValid(String theCode, 
                        ConstraintValidatorContext theConstraintValidatorContext) {
        boolean result = false;
        
        if (theCode != null) {
            
            //
            // loop thru course prefixes
            //
            // check to see if code matches any of the course prefixes
            //
            for (String tempPrefix : coursePrefixes) {
                result = theCode.startsWith(tempPrefix);
                
                // if we found a match then break out of the loop
                if (result) {
                    break;
                }
            }
        }
        else {
            result = true;
        }
        
        return result;
  }
3. Update Customer.java to validate using array of strings

    @CourseCode(value={"TOPS", "LUV"}, message="must start with TOPS or LUV")
    private String courseCode;
Note the use of curley braces.

---

Complete Source Code:

https://gist.github.com/darbyluv2code/0275ddb6e70e085a10fd464e36a42739

---

That's it. This provides a solution to integrate multiple validation string in one annotation. In this example, the code validates against both LUV and TOPS.





